const ThoiKhoaBieu = require('../models/ThoiKhoaBieuModel');

class ThoiKhoaBieuController {
  async renderPage(req, res) {
    try {
      const khoiList = await ThoiKhoaBieu.getKhoiList();
      const firstKhoi = khoiList[0]?.MaKhoi || '';
      const classes = await ThoiKhoaBieu.getClassesByKhoi(firstKhoi);
      const firstClass = classes[0]?.MaLop || '';

      const namHocList = await ThoiKhoaBieu.getNamHocList();
      const selectedNamHoc = namHocList[0] || '';
      const kyHocListObj = await ThoiKhoaBieu.getKyHocList(selectedNamHoc);
      const kyHocList = kyHocListObj.map(k => k.KyHoc);
      const selectedKyHoc = kyHocList[0] || '';
      const selectedNamHocStart = kyHocListObj[0]?.NgayBatDau || '2025-08-01';

      res.render('pages/thoikhoabieu', {
        khoiList,
        classes,
        subjects: [],
        namHocList,
        kyHocList,
        timetable: {},
        selectedKhoi: firstKhoi,
        selectedClass: firstClass,
        selectedNamHoc,
        selectedKyHoc,
        selectedLoaiTKB: 'Chuan',
        selectedNamHocStart,
        statusMessage: ''
      });
    } catch (err) {
      console.error(err);
      res.status(500).send('L·ªói server khi render trang');
    }
  }

  async getLopTheoKhoi(req, res) {
    try {
      const { MaKhoi } = req.body;
      if (!MaKhoi) return res.json([]);
      const classes = await ThoiKhoaBieu.getClassesByKhoi(MaKhoi);
      res.json(classes);
    } catch (err) {
      console.error(err);
      res.status(500).json({ error: 'L·ªói truy v·∫•n l·ªõp theo kh·ªëi' });
    }
  }

  async getKyHocList(req, res) {
    try {
      const { NamHoc } = req.body;
      const list = await ThoiKhoaBieu.getKyHocList(NamHoc);
      res.json(list);
    } catch (err) {
      console.error(err);
      res.status(500).json({ error: 'L·ªói khi l·∫•y h·ªçc k·ª≥' });
    }
  }

  async getSubjectsByClass(req, res) {
    try {
      const { MaLop, NamHoc, KyHoc } = req.body;
      const subjects = await ThoiKhoaBieu.getSubjectsWithTeacherByClass(MaLop, NamHoc, KyHoc);
      res.json(subjects);
    } catch (err) {
      console.error(err);
      res.status(500).json({ error: 'L·ªói khi l·∫•y m√¥n ƒë√£ ph√¢n c√¥ng gi√°o vi√™n cho l·ªõp' });
    }
  }

  async getTeacher(req, res) {
    try {
      const { MaLop, TenMonHoc } = req.body;
      const gv = await ThoiKhoaBieu.getTeacher(MaLop, TenMonHoc);
      res.json(gv);
    } catch (err) {
      console.error(err);
      res.status(500).json({ error: 'L·ªói khi l·∫•y gi√°o vi√™n' });
    }
  }

  async getAll(req, res) {
    try {
      let { MaLop, NamHoc, KyHoc, LoaiTKB } = req.body;
      if (!MaLop || !NamHoc)
        return res.status(400).json({ error: 'Thi·∫øu l·ªõp ho·∫∑c nƒÉm h·ªçc' });

      LoaiTKB = LoaiTKB || 'Chuan';
      const kyHocListObj = await ThoiKhoaBieu.getKyHocList(NamHoc);
      const kyHocList = kyHocListObj.map(k => k.KyHoc);
      if (!KyHoc || !kyHocList.includes(KyHoc)) KyHoc = kyHocList[0] || '';
      const selectedNamHocStart =
        kyHocListObj.find(k => k.KyHoc === KyHoc)?.NgayBatDau || '2025-08-01';

      const subjects = await ThoiKhoaBieu.getSubjectsWithTeacherByClass(MaLop, NamHoc, KyHoc);
      const timetable = await ThoiKhoaBieu.getGrid(MaLop, LoaiTKB, NamHoc, KyHoc);

      res.json({ timetable, subjects, selectedNamHocStart, statusMessage: 'ƒê√£ t·∫£i d·ªØ li·ªáu' });
    } catch (err) {
      console.error(err);
      res.status(500).json({ error: 'L·ªói khi t·∫£i TKB' });
    }
  }

async saveAll(req, res) {
  try {
    const { timetable = [], selectedNamHocStart } = req.body; 
    if (!selectedNamHocStart) 
      return res.status(400).json({ error: 'Thi·∫øu ng√†y b·∫Øt ƒë·∫ßu h·ªçc k·ª≥' });

    // G·ªçi lu√¥n updateMultiple, k·ªÉ c·∫£ timetable r·ªóng
    await ThoiKhoaBieu.updateMultiple(timetable, selectedNamHocStart);

    res.json({ message: 'L∆∞u th·ªùi kh√≥a bi·ªÉu th√†nh c√¥ng!' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'L·ªói khi l∆∞u TKB' });
  }
}



  async resetWeek(req, res) {
    try {
      const { MaLop, NamHoc, KyHoc, LoaiTKB } = req.body;
      if(!LoaiTKB || LoaiTKB==='Chuan') return res.status(400).json({ error:'Kh√¥ng th·ªÉ reset TKB chu·∫©n' });
      await ThoiKhoaBieu.resetWeek(MaLop, NamHoc, KyHoc, LoaiTKB);
      res.json({ message:`ƒê√£ reset ${LoaiTKB} v·ªÅ TKB chu·∫©n` });
    } catch(err) {
      console.error(err);
      res.status(500).json({ error:'L·ªói khi reset tu·∫ßn' });
    }
  }

  // ‚úÖ H√†m x√≥a cell ‚Äì c·∫≠p nh·∫≠t l·∫°i ƒë√∫ng c√°ch
  async deleteCell(req, res) {
    try {
      const { MaLop, NamHoc, KyHoc, LoaiTKB, Thu, TietHoc, TenMonHoc } = req.body;
      const result = await ThoiKhoaBieu.deleteCell(MaLop, NamHoc, KyHoc, LoaiTKB, Thu, TietHoc);

      if (!result.affectedRows || result.affectedRows === 0) {
        return res.json({ error: 0, message: 'Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ x√≥a, cell ƒë√£ tr·ªëng' });
      }

      // üîπ Sau khi x√≥a, ƒë·∫øm l·∫°i t·ªïng s·ªë ti·∫øt c·ªßa m√¥n ƒë√≥ trong DB
      const SoTietTuan = TenMonHoc
        ? await ThoiKhoaBieu.countSubjectWeeklyInDB(MaLop, NamHoc, KyHoc, TenMonHoc, LoaiTKB)
        : 0;

      res.json({ error: 0, message: 'ƒê√£ x√≥a m√¥n h·ªçc kh·ªèi CSDL', SoTietTuan });
    } catch (err) {
      console.error(err);
      res.status(500).json({ error: 1, message: 'L·ªói khi x√≥a cell' });
    }
  }
// ‚úÖ Ch·ªâ ƒë·∫øm s·ªë ti·∫øt ƒëang hi·ªÉn th·ªã trong UI (kh√¥ng c·ªông DB)
async checkSubjectLimit(req, res) {
  try {
    const { cells } = req.body;

    // üîπ Gom nh√≥m c√°c cell theo m√¥n h·ªçc (ch·ªâ trong UI)
    const cellCount = {};
    for (const c of cells) {
      if (!c.TenMonHoc) continue;
      cellCount[c.TenMonHoc] = (cellCount[c.TenMonHoc] || 0) + 1;
    }

    const warnings = [];

    // üîπ L·∫•y gi·ªõi h·∫°n t·ª´ng m√¥n v√† t·∫°o danh s√°ch c·∫£nh b√°o
    for (const [TenMonHoc, soHienTai] of Object.entries(cellCount)) {
      const soToiDa = await ThoiKhoaBieu.getSubjectWeeklyLimit(TenMonHoc);
      warnings.push({ TenMonHoc, soHienTai, soToiDa });
    }

    return res.json({
      status: 'ok',
      warnings
    });
  } catch (err) {
    console.error("L·ªói checkSubjectLimit:", err);
    return res.status(500).json({ status: 'error', message: err.message });
  }
}
}


module.exports = new ThoiKhoaBieuController();
